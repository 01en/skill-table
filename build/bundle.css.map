{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../SvelteTable.svelte",
    "../../App.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { createEventDispatcher } from 'svelte';\n\n  const dispatch = createEventDispatcher();\n\n  export let columns;\n  export let rows;\n  export let sortBy = \"\";\n  export let sortOrder = 1;\n  export let iconAsc = '▲';\n  export let iconDesc = '▼';\n  export let classNameTable = '';\n  export let classNameThead = '';\n  export let classNameTbody = '';\n  export let classNameSelect = '';\n  export let classNameRow = '';\n  export let classNameCell = '';\n\n  let sortFunction = () => \"\";\n  let showFilterHeader = columns.some(c => c.filterOptions !== undefined);\n  let filterValues = {};\n  let filterSettings = {};\n  let columnByKey = {};\n  columns.forEach(col => {\n    columnByKey[col.key] = col;\n  });\n\n  $: c_rows = rows\n    .filter(r =>\n    Object.keys(filterSettings).every(f => {\n    let ret =  (\n          filterSettings[f] === undefined ||\n          // default to value() if filterValue() not provided in col\n          filterSettings[f] === (typeof columnByKey[f].filterValue === 'function' ? \n            columnByKey[f].filterValue(r) : columnByKey[f].value(r))\n        );\n        return ret;\n    })\n    )\n    .map(r => (Object.assign({}, r, {$sortOn: sortFunction(r)} ) ) )\n    .sort((a, b) => {\n    if (a.$sortOn > b.$sortOn) return sortOrder;\n    else if (a.$sortOn < b.$sortOn) return -sortOrder;\n    return 0;\n    });\n\n  const asStringArray = (v) => [].concat(v).filter(v => typeof v === 'string');\n\n  const calculateFilterValues = () => {\n    filterValues = {};\n    columns.forEach(c => {\n    if (typeof c.filterOptions === \"function\") {\n        filterValues[c.key] = c.filterOptions(rows);\n    } else if (Array.isArray(c.filterOptions)) {\n        // if array of strings is provided, use it for name and value\n        filterValues[c.key] = c.filterOptions.map(val => ({name:val, value:val}));\n    }\n    });\n  };\n\n\n  $: {\n    let col = columnByKey[sortBy];\n    if (col !== undefined && col.sortable === true && typeof col.value === \"function\") {\n    sortFunction = r => col.value(r);\n    }\n  };\n\n  const updateSortOrder = (colKey) => {\n    if (colKey === sortBy) {\n      sortOrder = sortOrder === 1 ? -1 : 1\n    } else {\n      sortOrder = 1;\n    }\n  }\n  \n  const handleClickCol = (col) => {\n    updateSortOrder(col.key)\n    sortBy = col.key;\n    dispatch('clickCol', {key:col.key} );\n  }\n  \n  const handleClickRow = (row) => {\n    dispatch('clickRow', {row} );\n  }\n\n  const handleClickCell = (row, key) => {\n    dispatch('clickCell', {row, key} );\n  }\n\n  if (showFilterHeader) {\n    calculateFilterValues();\n  }\n</script>\n\n<style>\n  table {\n    width: 100%;\n  }\n  .isSortable {\n    cursor: pointer;\n  }\n\n  tr th select {\n    width: 100%;\n  }\n</style>\n\n<table class={asStringArray(classNameTable)}>\n  <thead class={asStringArray(classNameThead)}>\n    {#if showFilterHeader}\n      <tr>\n        {#each columns as col}\n          <th>\n            {#if filterValues[col.key] !== undefined}\n              <select bind:value={filterSettings[col.key]} class={asStringArray(classNameSelect)}>\n                <option value={undefined}></option>\n                {#each filterValues[col.key] as option}\n                  <option value={option.value}>{option.name}</option>\n                {/each}\n              </select>\n            {/if}\n          </th>\n        {/each}\n      </tr>\n    {/if}\n      <slot name=\"header\" sortOrder={sortOrder} sortBy={sortBy}>\n        <tr>\n          {#each columns as col}\n            <th\n              on:click={() => handleClickCol(col)}\n              class={asStringArray([col.sortable ? 'isSortable' : null, col.headerClass])}\n            >\n              {col.title}\n              {#if sortBy === col.key}\n                { sortOrder === 1 ? iconAsc : iconDesc}\n              {/if}\n            </th>\n          {/each}\n        </tr>\n      </slot>\n  </thead>\n  <tbody class={asStringArray(classNameTbody)}>\n    {#each c_rows as row, n}\n      <slot name=\"row\" row={row} n={n} >\n        <tr on:click={()=>{handleClickRow(row)}} class={asStringArray(classNameRow)}>\n          {#each columns as col}\n            <td\n              on:click={()=>{handleClickCell(row, col.key)}}\n              class={asStringArray([col.class, classNameCell])}\n            >{@html col.renderValue ? col.renderValue(row) : col.value(row)}</td>\n          {/each}\n        </tr>\n      </slot>\n    {/each}\n  </tbody>\n</table>\n",
    "<script>\n  import SvelteTable from \"svelte-table\";\n  export let name;\n  const rows = [\n    { user: \"1coin\", tech: \"React\", level: \"○\" },\n    { user: \"1coin\", tech: \"Svelth\", level: \"x\" }\n  ];\n  const columns = [\n    {\n      key: \"user\",\n      title: \"user\",\n      value: v => v.user,\n      sortable: true,\n      class: \"cell\"\n    },\n    {\n      key: \"tech\",\n      title: \"tech\",\n      value: v => v.tech,\n      sortable: true\n    },\n    {\n      key: \"level\",\n      title: \"level\",\n      value: v => v.level,\n      sortable: true\n    }\n  ];\n</script>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n\n  h1 {\n    color: #ff3e00;\n    text-transform: uppercase;\n    font-size: 4em;\n    font-weight: 100;\n  }\n\n  cell {\n    text-align: center;\n  }\n\n  @media (min-width: 640px) {\n    main {\n      max-width: none;\n    }\n  }\n</style>\n\n<main>\n  <h1>Hello {name}!</h1>\n  <p>\n    Visit the\n    <a href=\"https://svelte.dev/tutorial\">Svelte tutorial</a>\n    to learn how to build Svelte apps.\n  </p>\n</main>\n\n<SvelteTable {columns} {rows} />\n"
  ],
  "names": [],
  "mappings": "AAgGE,KAAK,4BAAC,CAAC,AACL,KAAK,CAAE,IAAI,AACb,CAAC,AACD,WAAW,4BAAC,CAAC,AACX,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,gBAAE,CAAC,EAAE,CAAC,MAAM,cAAC,CAAC,AACZ,KAAK,CAAE,IAAI,AACb,CAAC;AC1ED,IAAI,cAAC,CAAC,AACJ,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AAChB,CAAC,AAED,EAAE,cAAC,CAAC,AACF,KAAK,CAAE,OAAO,CACd,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,AAClB,CAAC,AAMD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,IAAI,cAAC,CAAC,AACJ,SAAS,CAAE,IAAI,AACjB,CAAC,AACH,CAAC"
}